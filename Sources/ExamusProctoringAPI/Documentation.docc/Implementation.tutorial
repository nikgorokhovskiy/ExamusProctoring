@Tutorial(time: 5) {
    @Intro(title: "Proctoring") {
        The tutorial will help you understand which methods to call and in what order.
        
    }
    
    @Section(title: "Main methods") {
        @ContentAndMedia {
            This section contains methods that you must call in order to correctly start the session.
            
        }
        
        @Steps {
            @Step {
                First you need to initialize the session with a link like examus://
                Returns true if the session has already started and can be continued. False if the session has not been started or received chunks.
                
                If the error is due to the fact that the exam does not exist, cannot be started yet, or the link is not valid, it will return `ExamusError.InitSessionErrorReason`. If the error was due to something else, then another appropriate `ExamusError` type will be returned.
                
                @Code(name: "Init code.swift", file: Proctoring-1-1-init.swift)
            }
            
            @Step {
                After that user should accept a license agreement.
                
                You can get an agreement using a `getAgreement()` method
                
                @Code(name: "Accept agreement.swift", file: Proctoring-1-2-agreement.swift)
            }
            
            @Step {
                To be sure that the recording will start, you need to check that you have access to the camera and microphone.
                
                @Code(name: "Check permissions.swift", file: Proctoring-1-3-check.swift)
            }
            
            @Step {
                Before taking a photo of a user and/or his documents, you must start a session on the server.
                You also need to request the required types of photos.
                
                @Code(name: "Start session.swift", file: Proctoring-1-4-start.swift)
            }
            
            @Step {
                When sending a photo, it is necessary to pass photo date to the method, as well as the type of photo from PhotoType enumeration .
                
                @Code(name: "Send photo.swift", file: Proctoring-1-5-sendPhoto.swift)
            }
            
            @Step {
                After uploading the photos, the library will be ready to start proctoring. To do this, you need to call the start method. If the user accepts the switch to single app mode and starts screen recording, a link to the exam will be returned in response. 
                
                In some cases, it can be missing, which will lead to an error. If this happens - call the method again if no error method was called while preparing the session
                
                @Code(name: "Start proctoring.swift", file: Proctoring-1-6-startProctoring.swift)
            }
            
            @Step {
                When the user wants to complete the exam, it is necessary to send information about this to the library
                
                @Code(name: "Stop proctoring.swift", file: Proctoring-1-7-stopProctoring.swift)
            }
            
            @Step {
                You can disable the single app mode if the user has lost the Internet connection. 
                
                When you turn it on and off, you will get a delegate method about interrupting and resuming
                
                @Code(name: "Change single app mode state.swift", file: Proctoring-1-8-changeSingleAppMode.swift)
            }
        }
    }
    
    @Section(title: "Delegates") {
        @ContentAndMedia {
            When preparing a session for proctoring and during it, situations may arise that it is desirable to handle.
        }
        @Steps {
            @Step {
                During the preparation of the session, it is necessary to conforms the protocol 'SessionPreparationDelegate'. 
                
                Then, if the photo is rejected by a proctor, there was an error getting the link to the exam or everything is ok and exam link was received, the library will call the appropriate method.
                
                @Code(name: "SessionPreparationDelegate.swift", file: Proctoring-2-1-preparation.swift)
            }
            
            @Step {
                When a session is proctored, the stop method is called when it ends, and then when all the videos are loaded, the finish method is called. At the same time, during the session, methods of interrupting and resuming the session can be called if the video cannot be loaded.
                
                To restrict the user while the session is stopped, you can, for example, apply a blur
                
                @Code(name: "SessionStatusDelegate.swift", file: Proctoring-2-2-status.swift)
            }
            
            @Step {
                It is also possible to receive errors that occur during library operation. To do this, you need to conform to the 'LoggerDelegate'
                
                You can also turn off receiving errors at any time. Enabled by default.
                
                @Code(name: "LoggerDelegate.swift", file: Proctoring-2-3-logger.swift)
            }
        }
    }
}
